-----------------------README for COMP40 Assignment 6---------------------------

Names: Nga Pham, Sartrapat Saengcharoentrakul
CS Dept. Logins: npham02, ssaeng01
Date: 04/07/15

Received help from: TAs.

What has been correctly implemented and what has not:
We believe that we have correctly implemented everything.

Significant departures from your design:
In our design document, we thought that we were going to use a table for our
instructions, but we changed our data structure to a UArray instead. We also
realized that we misunderstood on the map_segment function. So we corrected that
and created a stack to keep track of which segment is unmapped and can be
reused.

Time it takes to execute 50 million instructions and how we know:
We created a program with 500000 instructions and our um took 0.38 seconds to
run it. Therefore, we estimate that our program will take around 38 seconds to
run 50 million instructions.

Approximate hours spent analyzing the assignment: 10 hours

Approximate hours spent preparing the design: 4 hours

Approximate hours spent solving the problems after the analysis: 30 hours

Architecture of our system:

        - headquarter.c: It handles input and acts as the center that calls
          functions from different modules listed below.
        - um_memory.h: Manages UM memory access, creates and deletes
          segmented memory, stores/loads segmented memory and registers,
          accesses values stored in segments and registers. 
          Sets up and initializes the memory by calling functions
          from um_memory.h, and calls execute function from the emulator.h.
        - emulator.h: Accesses the words in segment 0 and unpacks the words by
          using parsing.h. Given the offcode from parsing.h, it calls
          instructions.h when appropriate.
        - parsing.h: Uses um_memory.h and bitpack.h to get the offcode and
          registers' information.
        - instructions.h: has a list of instructions that the UM can do.

UM unit tests:

halt.um: This unit tests Halt. If Halt is working, then this unit test should 
not print anything out. If halt function does not work, then this unit test 
will print out "Bad!".

LVOutput.um: This unit tests for Load Value and Output functions. It should
print out "Good!".

input.um: This unit tests for input and output. This unit test should print out
the value inserted by the user (through input). From our input.0, it should
print out "2".

add.um: This unit test mainly tests for the addition instruction. If everything 
works, this function should print out "2".

mult.um: This unit test mainly tests for the multiplication instruction. 
If everything works, this function should print out "@".

div.um: This unit test mainly tests for the division instruction. If 
everything works, this function should print out "2".

nand.um: This unit test mainly tests for the nand instruction. If 
everything works, this function should print out nothing (NULL).

cm.um: This unit test tests for the conditional move function. If conditional
move works, the output should be "3". 

goto.um: This unit test tests the goto ability, emit the string function, and
the Load Program. This test should print out "GOTO passed.".

map_SLSS.um: This unit tests mainly for the map_segment function. However it
also tests for Load Value, Map Segment, Segment Store, Segment Load, Output, 
and Unmap instructions. If everything works, this unit test should print out
'BEE'.

half_million.um: This unit test exists to give us a general idea of the speed
 of our um. It should not emit out anything.