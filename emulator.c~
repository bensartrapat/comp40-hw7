/* 
 * 	Title: emulator.c 
 * 	Name: Nga Pham, Sartrapat Saengcharoentrakul 
 * 	Username: npham02, ssaeng01
 * 	Assigment 6
 * 
 * 	Purpose: implementation for emulator.h. Go through the program and 
 * 		 execute each instruction accordingly, calling functions from 
 * 		 instructions.h.
 * 				
 */


#include <stdlib.h>
#include <stdio.h>

#include "emulator.h"
#include "assert.h"
#include "um_memory.h"

const int RA = 23;
const int RB = 26;
const int RC = 29;
const int REG_WIDTH = 3;
const int OP_WIDTH = 4;
const int OP_N_REG_WIDTH = 7;
const int REG_SHIFT_RIGHT = 29;
const int INST_WIDTH = 32;

static inline void call_instruction(umMem_T memory, uint32_t* progCounter);

void execute(umMem_T memory)
{
	/* loop through the whole segment zero */
        uint32_t progCounter = 0;
        
        while (1) {
                call_instruction(memory, &progCounter);
        }
}


/* Given an uint32_t word, call appropriate instruction function
 * to execute it. Fail if word doesn't code for a valid instruction 
 */
static inline void call_instruction(umMem_T memory, uint32_t* progCounter)
{
        //uint32_t word = segment_get(memory, 0, *progCounter);
        uint32_t word = memory->segment0[*progCounter];
        
        int rA = 0, rB = 0, rC = 0;		/* three_instruction value */
        unsigned ra = 0, value = 0;		/* instruction_13 value */
        int opcode = word >> (INST_WIDTH - OP_WIDTH);
        assert(opcode >= 0 && opcode <= 13);
        
        /* parse appropriate values according to given opcode */
        if (opcode == 13) {
                ra = (word << OP_WIDTH) >> REG_SHIFT_RIGHT;
                value = (word << OP_N_REG_WIDTH) >> OP_N_REG_WIDTH;
        } else {
                rA = (word << RA) >> REG_SHIFT_RIGHT;
                rB = (word << RB) >> REG_SHIFT_RIGHT;
                rC = (word << RC) >> REG_SHIFT_RIGHT;
        }
        
        if (opcode != 12) 
                (*progCounter) = (*progCounter) + 1;
        
        fprintf(stderr, "opcode = %u\n", opcode);
        switch(opcode) {
                case 0: conditional_move(memory, rA, rB, rC);
                	return;
                case 1: segmented_load(memory, rA, rB, rC);
                        return;
                case 2: segmented_store(memory, rA, rB, rC);
                        return;
                case 3: addition(memory, rA, rB, rC);
                        return;
                case 4: multiplication(memory, rA, rB, rC);
                        return;
                case 5: division(memory, rA, rB, rC);
                        return;
                case 6: bitwise_NAND(memory, rA, rB, rC);
                        return;
                case 7: halt(memory);
                        return;
                case 8: map_segment(memory, rB, rC);
                        return;
                case 9: unmap_segment(memory, rC);
                        return;
                case 10: output(memory, rC);
                        return;
                case 11: input(memory, rC);
                        return;
                case 12: (*progCounter) = load_program(memory, rB, rC);
                        return;
                case 13: load_value(memory, ra, value);
                        return;
        }
}
